---
import type { CollectionEntry } from "astro:content"
import { getCollection } from "astro:content"
import BaseLayout from "../../layouts/base.astro"

export async function getStaticPaths() {
    const blogEntries = await getCollection("post")
    return blogEntries.map((entry) => ({
        params: { slug: entry.slug },
        props: { entry },
    }))
}

interface Props {
    entry: CollectionEntry<"post">
}

const { entry } = Astro.props
const { Content, remarkPluginFrontmatter, headings } = await entry.render()

const topHeadings = headings.filter((h) => h.depth === 1)
---

<BaseLayout title={entry.data.title}>
    <div class="intro">
        <h1>{entry.data.title}</h1>
        <span>{entry.data.publishDate.toDateString()}</span>
        <span class="time-to-read">
            {remarkPluginFrontmatter.minutesRead}
        </span>
        <div>
            {
                entry.data.tags.map((tag, idx) => {
                    return (
                        <span>
                            <a class="tag" href={`/tags/${tag}`}>
                                {tag}
                            </a>
                            {idx !== entry.data.tags.length - 1 ? (
                                <span> · </span>
                            ) : null}
                        </span>
                    )
                })
            }
        </div>
    </div>
    <article>
        <div id="toc">
            {
                topHeadings.map((h) => (
                    <a href={`#${h.slug}`}>
                        <h3>{h.text}</h3>
                    </a>
                ))
            }
        </div>
        <Content />
    </article>

    <button id="backToTopButton" aria-label="Back to Top">↑</button>
</BaseLayout>

<style>
    h1 {
        margin: 0;
    }
    .intro {
        box-shadow:
            rgba(0, 0, 0, 0.05) 0px 6px 24px 0px,
            rgba(0, 0, 0, 0.08) 0px 0px 0px 1px;
        border: 2px solid var(--black);
        border-bottom: 4px solid var(--black);
        border-radius: 4px;
        display: flex;
        padding: 1em;
        flex-direction: column;
        margin-bottom: 3em;
    }

    #backToTopButton {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #fff;
        color: #000;
        border: none;
        border-radius: 4px;
        padding: 10px;
        cursor: pointer;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        opacity: 0;
        visibility: hidden;
        transition:
            opacity 0.3s,
            visibility 0.3s;
    }

    #backToTopButton.show {
        opacity: 1;
        visibility: visible;
    }

    #toc {
        font-size: 0.8em;
        display: grid;
        grid-template-columns: 1fr;
    }

    #toc > a > h3 {
        margin: 0.1em 0;
    }
</style>

<script>
    const backToTopButton = document.getElementById("backToTopButton")

    window.addEventListener("scroll", () => {
        if (window.scrollY > 300) {
            backToTopButton?.classList.add("show")
        } else {
            backToTopButton?.classList.remove("show")
        }
    })

    backToTopButton?.addEventListener("click", () => {
        window.scrollTo({
            top: 0,
            behavior: "auto",
        })
    })
</script>
